generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model AdminUser {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model About {
  id               String   @id @default(uuid())
  title            String
  description      String   @db.Text
  projectCompleted Int
  yearExperience   Int
  clientServe      Int
  signature        String   @db.Text
  resumeUrl        String   @db.Text
  cvUrl            String   @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Education {
  id              String   @id @default(uuid())
  institutionName String
  degree          String
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Experience {
  id          String   @id @default(uuid())
  companyName String
  position    String
  startDate   DateTime
  endDate     DateTime
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  logo        String   @db.Text
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TechnologyCategory {
  TECHNICAL
  SOFT_SKILL
}

model Technology {
  id                    String                  @id @default(uuid())
  name                  String                  @unique
  logo                  String                  @db.Text
  category              TechnologyCategory      @default(TECHNICAL)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  projectUsedTechnology ProjectUsedTechnology[]
}

enum ProjectCategory {
  FRONTEND
  BACKEND
  FULLSTACK
  MOBILE
  DESKTOP
  OTHER
}

model Project {
  id                    String                  @id @default(uuid())
  name                  String
  description           String                  @db.Text
  projectUrl            String
  githubClientUrl       String                  @db.Text
  githubServerUrl       String                  @db.Text
  projectCategory       ProjectCategory         @default(OTHER)
  duration              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  image                 String                  @db.Text
  projectUsedTechnology ProjectUsedTechnology[]
  projectReview         ProjectReview[]
}

model ProjectUsedTechnology {
  id           String     @id @default(uuid())
  projectId    String
  technologyId String
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ProjectReview {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name      String
  email     String
  review    String   @db.Text
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BlogCategory {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  DESKTOP_DEVELOPMENT
  OTHER
}

model Blog {
  id          String       @id @default(uuid())
  title       String
  description String       @db.Text
  image       String       @db.Text
  category    BlogCategory @default(OTHER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminContact {
  id      String @id @default(uuid())
  phone   String @unique
  email   String @unique
  address String
  mapUrl  String @db.Text
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  subject   String
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialMedia {
  id        String   @id @default(uuid())
  name      String
  icon      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
